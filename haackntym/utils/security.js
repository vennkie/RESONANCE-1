const crypto = require('crypto');

class SecurityManager {
    constructor(config) {
        this.algorithm = 'aes-256-gcm';
        this.secretKey = crypto.randomBytes(32);  // Secret key for encryption
    }

    // Encrypt the data using AES-256-GCM
    async encryptData(data) {
        const iv = crypto.randomBytes(16);  // Initialization vector (random)
        const cipher = crypto.createCipheriv(this.algorithm, this.secretKey, iv);
        const encrypted = Buffer.concat([cipher.update(data, 'utf8'), cipher.final()]);

        // Get the authentication tag generated by GCM mode
        const authTag = cipher.getAuthTag();

        return { iv, encrypted, authTag };  // Return the encrypted data, iv, and auth tag
    }

    // Decrypt the encrypted data
    async decryptData(encryptedData) {
        const { iv, encrypted, authTag } = encryptedData;

        // Create decipher using the same algorithm, key, and iv
        const decipher = crypto.createDecipheriv(this.algorithm, this.secretKey, iv);
        decipher.setAuthTag(authTag);

        let decrypted = decipher.update(encrypted, undefined, 'utf8');
        decrypted += decipher.final('utf8');

        return decrypted;  // Return the decrypted data as a string
    }

    // Generate a secure random token
    generateToken() {
        return crypto.randomBytes(32).toString('hex');
    }
}

module.exports = { SecurityManager };
